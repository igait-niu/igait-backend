#
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches: ['master']
    paths:
      - 'igait-backend/**'
      - 'igait-lib/**'
      - 'flake.nix'
      - 'flake.lock'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/main.yml'

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      # 
    steps:
      # Checks out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Install Nix with flakes support
      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      # Optional: Use Cachix for faster builds (if you have a cache)
      # - name: Setup Cachix
      #   uses: cachix/cachix-action@v12
      #   with:
      #     name: your-cache-name
      #     authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      
      # Build the Docker image using Nix
      - name: Build Docker image with Nix
        run: |
          nix build .#docker
          docker load < result
      
      # Log in to GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Tag and push the image
      - name: Tag and push Docker image
        run: |
          docker tag igait-backend:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag igait-backend:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
