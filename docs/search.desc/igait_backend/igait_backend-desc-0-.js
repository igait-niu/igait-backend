searchState.loadedDescShard("igait_backend", 0, "iGait ASD - Backend\nThis module contains the daemons that are used to manage …\nThis module contains all the helper functions used in the …\nThe main entrypoint for the iGait backend.\nThis module contains the routes for the API.\nContains the filesystem daemon functions.\nChecks the a directory entry from the <code>inputs</code> folder, and …\nRecursively uploads a given folder to AWS.\nThe work inputs daemon, which checks the inputs directory …\nSimilar to the input helper, this processes one DirEntry …\nThe work inputs daemon, which checks the inputs directory …\nContains the database helper functions.\nContains the email helper functions.\nContains the filesystem helper functions and custom types.\nContains the Metis helper functions.\nA wrapper class on the Firebase database to make it easier …\nGets the status of a job.\nCounts the number of jobs a user has.\nEnsures that a user exists in the database.\nReturns the argument unchanged.\nGets all jobs of a user.\nGets a job given a user ID and a job ID.\nInitializes the Firebase wrapper class.\nCalls <code>U::from(self)</code>.\nAdds a new job to the user’s job list.\nUpdates the status of a job.\nA wrapper around <code>send_email</code> that thanks the recipient for …\nSends an email to the specified address with the specified …\nA wrapper around <code>send_email</code> that sends a failure email to …\nA wrapper around <code>send_email</code> that sends a success email to …\nA wrapper around <code>send_email</code> that sends a welcome email to …\nThe error type for the application.\nThe job struct, which contains the job\nThe job status struct, which contains the status of the …\nThe job status code enum, which contains the status codes …\nThe request struct for the historical submissions endpoint.\nThe user struct, which contains a user ID and a list of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes the application state with a new database and …\nEnum representing either a local or remote path, for use …\nA function that allows the user to copy files using the …\nRemoves a logfile off of Metis\nDeletes an output folder off of Metis\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks whether an output file exists on Metis\nThis module contains the assistant endpoint for the API.\nThis module contains the contribute endpoint for the API, …\nThis module contains the historical submissions endpoint …\nThis module contains the job upload endpoint for the API.\nRepresents an update from the assistant to the client.\nRepresents the arguments for the <code>get_last_job</code> and …\nThe entry point for the assistant route.\nThe entry point for the API-facing assistant route.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles the proxied socket connection.\nA helper function to handle the proxied socket connection.\nHandles the socket connection for the assistant route.\nA helper function to handle the socket connection.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSends a response to the client over a mutable <code>WebSocket</code> …\nA request to upload a video for the contribute endpoint.\nA representation of a file in a <code>Multipart</code> request.\nThe entrypoint for the contribute request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSaves the upload files to S3 and the local filesystem.\nTakes in the <code>Multipart</code> request and unpacks the arguments …\nThe request arguments for the historical submissions …\nReturns the argument unchanged.\nGenerates a PDF file containing the complete history of …\nThe entrypoint for the historical submissions endpoint.\nCalls <code>U::from(self)</code>.\nTakes in the <code>Multipart</code> request and unpacks the arguments …\nThe required arguments for the upload request.\nA representation of a file in a <code>Multipart</code> request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSaves the upload files to S3 and the local filesystem.\nTakes in the <code>Multipart</code> request and unpacks the arguments …\nThe entrypoint for the upload request.")