searchState.loadedDescShard("igait_backend", 0, "iGait ASD - Backend\nThis module contains the daemons that are used to manage …\nThis module contains all the helper functions used in the …\nThe main entrypoint for the iGait backend.\nPrints indication of a backend-related message.\nPrints indication of a database-related message.\nPrints indication of a Metis-related message.\nPrints indication of a S3-related message.\nThis module contains the routes for the API.\nContains the filesystem daemon functions.\nChecks the directory for a given entry and updates the …\nThe work queue daemon, which checks the queue directory …\nContains the database helper functions.\nContains the email helper functions.\nContains the filesystem helper functions and custom types.\nContains the Metis helper functions.\nContains the debug printing helper functions.\nA wrapper class on the Firebase database to make it easier …\nCounts the number of jobs a user has.\nEnsures that a user exists in the database.\nReturns the argument unchanged.\nGets all jobs of a user.\nGets a job given a user ID and a job ID.\nGets the status of a job.\nInitializes the Firebase wrapper class.\nCalls <code>U::from(self)</code>.\nAdds a new job to the user’s job list.\nUpdates the status of a job.\nSends an email to the specified address with the specified …\nA wrapper around <code>send_email</code> that sends a failure email to …\nA wrapper around <code>send_email</code> that sends a success email to …\nA wrapper around <code>send_email</code> that sends a welcome email to …\nThe error type for the application.\nThe state of the entire backend application with handles …\nThe job struct, which contains the job\nThe job status struct, which contains the status of the …\nThe job status code enum, which contains the status codes …\nThe unique identifier for a job task.\nThe request struct for the historical submissions endpoint.\nThe user struct, which contains a user ID and a list of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes the application state with a new database and …\nQueries METIS for the specified job.\nThis module contains the completion endpoint for the API.\nThis module contains the historical submissions endpoint …\nThis module contains the job upload endpoint for the API.\nThe required arguments for the completion request.\nThe completion entrypoint for the server.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnpacks the completion request arguments from the …\nThe request arguments for the historical submissions …\nReturns the argument unchanged.\nGenerates a PDF file containing the complete history of …\nThe entrypoint for the historical submissions endpoint.\nCalls <code>U::from(self)</code>.\nTakes in the <code>Multipart</code> request and unpacks the arguments …\nThe required arguments for the upload request.\nA representation of a file in a <code>Multipart</code> request.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSaves the upload files to S3 and the local filesystem.\nTakes in the <code>Multipart</code> request and unpacks the arguments …\nThe entrypoint for the upload request.")