rd_("BfThe job struct, which contains the jobCjContains the filesystem helper functions and custom types.CmInitializes the application state with a new database and \xe2\x80\xa6CkThe user struct, which contains a user ID and a list of \xe2\x80\xa6AoReturns the argument unchanged.000000000000000000000000BgInitializes the Firebase wrapper class.BaCalls <code>U::from(self)</code>.000000000000000000000000BjThe main entrypoint for the iGait backend.BdContains the email helper functions.BdContains the Metis helper functions.CmThis module contains all the helper functions used in the \xe2\x80\xa6BlThis module contains the routes for the API.CiThis module contains the job upload endpoint for the API.ClEnum representing either a local or remote path, for use \xe2\x80\xa6BhGets a job given a user ID and a job ID.BhAdds a new job to the user\xe2\x80\x99s job list.BcThe error type for the application.CnA wrapper class on the Firebase database to make it easier \xe2\x80\xa6BgContains the database helper functions.CmThis module contains the pipeline submission endpoint for \xe2\x80\xa6CkThe job status struct, which contains the status of the \xe2\x80\xa6ChThis module contains the assistant endpoint for the API.CkA function that allows the user to copy files using the \xe2\x80\xa6CmThis module contains the contribute endpoint for the API, \xe2\x80\xa6BeCounts the number of jobs a user has.ClThis module contains the historical submissions endpoint \xe2\x80\xa6BcSubmits a PBS job to Metis via qsubCnSends an email to the specified address with the specified \xe2\x80\xa6AiGets the status of a job.BkEnsures that a user exists in the database.AhGets all jobs of a user.CmThe job status code enum, which contains the status codes \xe2\x80\xa6CfHandles the socket connection for the assistant route.AciGait ASD - BackendDhSends a response to the client over a mutable <code>WebSocket</code> \xe2\x80\xa6CdThe stage to start at (1-6, optional to skip stages)AlUpdates the status of a job.CfRepresents an update from the assistant to the client.BaPath to the side input video fileCnPath to the output folder, which is created if it does not \xe2\x80\xa6BbPath to the front input video fileCoA representation of a file in a <code>Multipart</code> request.CfSaves the upload files to S3 and the local filesystem.0BfThe entrypoint for the upload request.B`Whether to write the output JSONDbRepresents the arguments for the <code>get_last_job</code> and \xe2\x80\xa6DjA wrapper around <code>send_email</code> that sends a welcome email to \xe2\x80\xa6DjA wrapper around <code>send_email</code> that sends a failure email to \xe2\x80\xa6DjA wrapper around <code>send_email</code> that sends a success email to \xe2\x80\xa6BbWhether to submit to the webserverBhThe entry point for the assistant route.CbA helper function to handle the socket connection.:BjThe entrypoint for the contribute request.BfHandles the proxied socket connection.CgThe entrypoint for the historical submissions endpoint.BnThe required arguments for the upload request.CkGenerates a PDF file containing the complete history of \xe2\x80\xa6DjA wrapper around <code>send_email</code> that thanks the recipient for \xe2\x80\xa6DiTakes in the <code>Multipart</code> request and unpacks the arguments \xe2\x80\xa6ChA request to upload a video for the contribute endpoint.ChThe request arguments for the historical submissions \xe2\x80\xa6CkPipeline submission endpoint that receives results from \xe2\x80\xa6BkSend a result email for pipeline completionClProcess the pipeline submission by updating the database \xe2\x80\xa655CcThe entry point for the API-facing assistant route.CjA helper function to handle the proxied socket connection.")